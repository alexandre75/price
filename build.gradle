buildscript {
	ext {
		osPackageVersion = "8.1.0"
	}
	repositories {
		jcenter()
	}
	dependencies {
		classpath("com.netflix.nebula:gradle-ospackage-plugin:${osPackageVersion}")
	}
}

plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
    id 'groovy'
    id 'idea'
}

apply plugin: "nebula.ospackage"
apply plugin: 'groovy'

group = 'me.cuenca'
version = "0.1"
sourceCompatibility = '1.11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// https://mvnrepository.com/artifact/junit/junit
	//testImplementation group: 'junit', name: 'junit', version: '4.12'

	// https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver
	implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.1'
// https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxjava
	implementation group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.2.18'
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation group: 'com.google.guava', name: 'guava', version: '28.2-jre'
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

	// https://mvnrepository.com/artifact/javax.activation/activation
	implementation group: 'javax.activation', name: 'activation', version: '1.1.1'

    testRuntimeOnly("org.codehaus.groovy:groovy-all:2.5.2")
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation("org.spockframework:spock-spring:1.2-groovy-2.5")
    
}

sourceSets {
    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}


task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

test {
	useJUnitPlatform()
}

// OS Package plugin configuration
ospackage {
    requires('openjdk-11-jre')


    packageName = "price"

    // Uses the main project version
    version = "${project.version}"

    /* Could be anything - in our production builds,
       this is set to the git commit hash */
    release = findProperty("buildNumber")

    os = LINUX
    type = BINARY
    arch = "amd64"

    /* Our install scripts - see the full code for examples.
       They usually do simple prep/cleanup tasks */
    preInstall file("scripts/preInstall.sh")
    postInstall file("scripts/postInstall.sh")
    preUninstall file("scripts/preUninstall.sh")
    //postUninstall file("scripts/rpm/postUninstall.sh")

    // Sets our working directory and permissions, basically
    into "/usr/lib/price"
    user "price"
    permissionGroup "price"

    // Copy the actual .jar file
    from(jar.outputs.files) {
        // Strip the version from the jar filename
        rename { String fileName ->
            fileName.replace("-${project.version}", "")
        }
        fileMode 0500
        into "./"
    }

    // Copy the config files
    from("install/conf") {
        fileType CONFIG | NOREPLACE
        fileMode 0754
        into "/etc/price"
    }
	
	from("install/service") {
		fileType CONFIG | NOREPLACE
		fileMode 0754
		into "/etc/systemd/system"
	}
}

buildDeb {
    user "price"
    permissionGroup "price"
    directory("/var/log", 0755)
}